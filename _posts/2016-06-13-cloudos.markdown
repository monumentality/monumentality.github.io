---
layout: post
title:  "cloudos"
date: 2016-06-13
categories: cs
---

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 虚拟机化的容器？</a>
<ul>
<li><a href="#sec-1-1">1.1. 在物理机上直接运行容器，把容器当做完整的虚拟机来用：LXD</a></li>
<li><a href="#sec-1-2">1.2. 只使用容器的方式：joyent</a></li>
<li><a href="#sec-1-3">1.3. 虚拟机内运行容器: hyper</a></li>
<li><a href="#sec-1-4">1.4. 容器内运行虚拟机：docker+unikernel</a></li>
</ul>
</li>
<li><a href="#sec-2">2. 数据中心的架构？</a>
<ul>
<li><a href="#sec-2-1">2.1. 架构</a></li>
<li><a href="#sec-2-2">2.2. openstack + lxd  = openstack + hyper</a></li>
<li><a href="#sec-2-3">2.3. coreos + kubernetes + docker</a></li>
<li><a href="#sec-2-4">2.4. coreos + hypernetes + docker</a></li>
<li><a href="#sec-2-5">2.5. coreos + mesos + kubernetes + docker + unikernel</a></li>
</ul>
</li>
<li><a href="#sec-3">3. 容器迁移？</a></li>
<li><a href="#sec-4">4. Cloud operating system</a>
<ul>
<li><a href="#sec-4-1">4.1. 组成：</a></li>
</ul>
</li>
</ul>
</div>
</div>

# 虚拟机化的容器？<a id="sec-1" name="sec-1"></a>

以下几种方案可能会并存：

## 在物理机上直接运行容器，把容器当做完整的虚拟机来用：LXD<a id="sec-1-1" name="sec-1-1"></a>

如果真的实现容器和虚拟机一样安全，隔离，那么带来的overhead应该也差不多。同一个东西的另一种实现方式，没有创新。

应用场景很少，我几乎想不到：公有云提供商不会卖直接运行在物理机上的容器；为了运行服务，容器当然越小越好，容器将只包含运行服务所需的最小操作系统；

## 只使用容器的方式：joyent<a id="sec-1-2" name="sec-1-2"></a>

<https://www.joyent.com/>

由于使用了Solaris的很多技术，保证了容器的安全和隔离，因此提供了一个没有vm的容器云。

## 虚拟机内运行容器: hyper<a id="sec-1-3" name="sec-1-3"></a>

利用hypervisor提供的安全和隔离，客户操作系统只是一个极简linux内核。获得了虚拟机和容器两者的优点

## 容器内运行虚拟机：docker+unikernel<a id="sec-1-4" name="sec-1-4"></a>

应用需要弹性扩展=>微服务架构=>容器+容器编排工具和标准=>容器进一步简化成为库操作系统

库操作系统应该是未来

# 数据中心的架构？<a id="sec-2" name="sec-2"></a>

## 架构<a id="sec-2-1" name="sec-2-1"></a>

宿主操作系统：各种linux，如ubuntu，coreos

资源管理： mesos，yarn，borg

作业管理/服务编排工具/分布式initd：kubernetes, coreos的flannel，mesosphere的marathon

客户操作系统：虚拟机中的完整linux镜像；容器中的linux基础镜像；把操作系统作为库和应用打包为一个可执行程序的unikernel;

## openstack + lxd  = openstack + hyper<a id="sec-2-2" name="sec-2-2"></a>

docklet类似openstack +lxd

## coreos + kubernetes + docker<a id="sec-2-3" name="sec-2-3"></a>

未来对于一个中小企业，租用amazon ec2 或者gce，安装coreos系统，安装kubernetes，然后部署自己公司的服务和大数据计算框架

## coreos + hypernetes + docker<a id="sec-2-4" name="sec-2-4"></a>

比第二个方案更好的容器安全和资源隔离；可用于搭建公有云；也适用于企业自行搭建私有云混合云

## coreos + mesos + kubernetes + docker + unikernel<a id="sec-2-5" name="sec-2-5"></a>

加入资源调度，提升资源利用率；
未来docker会通过和unikernel集成，解决容器安全和资源隔离的问题，同时进一步提升性能，精简微服务；

# 容器迁移？<a id="sec-3" name="sec-3"></a>

lxd使用criu，自称live migration, 其实不是。

有状态容器需要两步迁移：

第一步：创建snapshot, 把snapshot从node1迁移到node2；

第二步：在创建snapshot之后，node1上的容器接收了一些新的请求，把这些请求在node2上执行；

设置dns指向node2上的新容器，关闭node1上的容器。

已经有一些开源项目实现了容器迁移，例如flocker

# Cloud operating system<a id="sec-4" name="sec-4"></a>

## 组成：<a id="sec-4-1" name="sec-4-1"></a>

宿主操作系统：各种linux，如ubuntu，coreos

分布式资源管理： mesos，yarn，borg

分布式作业管理/服务编排工具/分布式initd：kubernetes, coreos的flannel，mesosphere的marathon

客户操作系统：虚拟机中的完整linux镜像；容器中的linux基础镜像；把操作系统作为库和应用打包为一个可执行程序的unikernel;
